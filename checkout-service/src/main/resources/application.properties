spring.application.name= checkout-service
server.port=8081
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service

management.endpoints.web.exposure.include= health,info,circuitbreakers, circuitbreakerevents


#con esto podemos configurar en el endpoint de health info del circuitbreaker
management.health.circuitbreakers.enabled = true

#con esto podemos configurar que muestre mas informacion
management.endpoint.health.show-details=always


spring.config.import=optional:configserver:

eureka.instance.hostname=localhost

loadbalancer.client.name=product-service

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/Dh

#configuracion del circuitbreaker

#product hace referencia al servicio con quien se va a comunicar,seguido del nombre de la properties que vamos a modificar
#Habilita al circuit que tenga el poder de modificar el estado del  microservicio
resilience4j.circuitbreaker.instances.product.allowHealthIndicatorToFail = false

#Nos permite agregar informacion del circuitbreaker en el endpoint de salud de actutor /actutor/health
resilience4j.circuitbreaker.instances.product.registerHealthIndicator= true

#Configuracion de la logica del patron
resilience4j.circuitbreaker.instances.product.slidingWindowType=COUNT_BASED

#Cantidad de eventos para realizar el analysis, luego de 5 solicitudes analizamos la respuesta de product-service
resilience4j.circuitbreaker.instances.product.slidingWindowSize = 5

#porcentaje de fallas permitimos para no hacer un cambio de estado, en este caso 50%
resilience4j.circuitbreaker.instances.product.failureRateThreshold= 50


#Cuanto tiempo vamos a esperar en estado open, para pasar a half-open, en este 15seg
resilience4j.circuitbreaker.instances.product.waitDurationInOpenState = 15000

#Cuantas solicitudes dejamos que pasen a product-service para realizar un analiss
resilience4j.circuitbreaker.instances.product.permittedNumberOfCallsInHalfOpenState = 3

#Si el 50% de 3 solicitudes fallam vuelve open y sino close
resilience4j.circuitbreaker.instances.product.automaticTransitionFromOpenToHalfOpenEnabled = true

#Maximo intentos de intentos
resilience4j.retry.instances.product.maxAttempts = 3

#cuanto timepo entre un intento y otro
resilience4j.retry.instances.product.waitDuration = 500

#Cuando queremos que se ejecute este reintento, aca tenemos que ver que error tira feign cuando arroja un 500 en produc-service
resilience4j.retry.instances.product.retryExceptions[0]=feign.FeignException$InternalServerError